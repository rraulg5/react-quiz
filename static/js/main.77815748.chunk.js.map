{"version":3,"sources":["API.ts","assets/img/mountains.jpg","App.styles.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","utils.ts","components/Quiz.tsx","hooks/useQuiz.tsx","App.tsx","index.tsx"],"names":["Type","Difficulty","GlobalStyle","createGlobalStyle","BGImage","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNmb","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","Quiz","TOTAL_QUESTIONS","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","console","log","checkAnswer","e","currentTarget","answerObj","nextQuestion","useQuiz","length","undefined","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77815748.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\r\nexport interface Result {\r\n  results: Question[];\r\n}\r\n\r\nexport interface Question {\r\n  category: string;\r\n  type: Type;\r\n  difficulty: Difficulty;\r\n  question: string;\r\n  correct_answer: string;\r\n  incorrect_answers: string[];\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Type {\r\n  Multiple = 'multiple',\r\n}\r\n\r\nexport enum Difficulty {\r\n  EASY = 'easy',\r\n  MEDIUM = 'medium',\r\n  HARD = ' hard',\r\n}\r\n\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data: Result = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n};\r\n","export default __webpack_public_path__ + \"static/media/mountains.8693592d.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\r\nimport BGImage from './assets/img/mountains.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%;\r\n  }\r\n\r\n  body {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n\r\n  * {\r\n    font-family: 'Rubik', sans-serif;\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  > p {\r\n    color: #fff;\r\n  }\r\n\r\n  .score {\r\n    color: #fff;\r\n    font-family: Rubik;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n    background: #3e5c75;\r\n    border-radius: 10px;\r\n    border: 2px solid #fff;\r\n    padding: 10px 50px;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    text-align: center;\r\n  }\r\n\r\n  h1 {\r\n    font-family: Rubik;\r\n    color: #3e5c76;\r\n\r\n    font-weight: 400;\r\n    background-size: 100%;\r\n    background-clip: text;\r\n\r\n    font-size: 2.5rem;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n\r\n  .start,\r\n  .next {\r\n    cursor: pointer;\r\n    color: #fff;\r\n    background: #538ec2;\r\n    border: 2px solid #3e5c76;\r\n    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    font-size: 1.2rem;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  background: rgba(255, 255, 255, 0.85);\r\n  border-radius: 10px;\r\n  border: 2px solid #3e5c76;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  color: #31485c;\r\n  max-width: 1100px;\r\n  margin-top: 1.5rem;\r\n  padding: 20px;\r\n  text-align: center;\r\n\r\n  p {\r\n    font-size: 1.2rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct ? '#59BC86' : !correct && userClicked ? '#FF5656' : '#7AA0C2'};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { AnswerObject } from '../types/AnswerObject';\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\ninterface Props {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNmb: number;\r\n  totalQuestions: number;\r\n}\r\n\r\nexport const QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNmb,\r\n  totalQuestions,\r\n}) => {\r\n  return (\r\n    <Wrapper>\r\n      <p className=\"number\">\r\n        Question: {questionNmb} / {totalQuestions}\r\n      </p>\r\n      <p dangerouslySetInnerHTML={{ __html: question }}></p>\r\n      <div>\r\n        {answers.map((answer) => (\r\n          <ButtonWrapper\r\n            key={answer}\r\n            correct={userAnswer?.correctAnswer === answer}\r\n            userClicked={userAnswer?.answer === answer}\r\n          >\r\n            <button\r\n              disabled={userAnswer ? true : false}\r\n              value={answer}\r\n              onClick={callback}\r\n            >\r\n              <span dangerouslySetInnerHTML={{ __html: answer }}></span>\r\n            </button>\r\n          </ButtonWrapper>\r\n        ))}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n","export const shuffleArray = (array: string[]) => {\r\n  return [...array].sort(() => Math.random() - 0.5);\r\n};\r\n","import { GlobalStyle, Wrapper } from '../App.styles';\r\nimport { QuestionCard } from './QuestionCard';\r\nimport { useQuiz } from '../hooks/useQuiz';\r\n\r\nconst TOTAL_QUESTIONS = 10;\r\n\r\nexport const Quiz = () => {\r\n  const {\r\n    loading,\r\n    questions,\r\n    number,\r\n    userAnswers,\r\n    score,\r\n    gameOver,\r\n    startTrivia,\r\n    checkAnswer,\r\n    nextQuestion,\r\n  } = useQuiz({ TOTAL_QUESTIONS });\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n\r\n      <Wrapper>\r\n        <h1>React Quiz</h1>\r\n\r\n        {loading && <p>Loading Questions...</p>}\r\n\r\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\r\n          <button className=\"start\" onClick={startTrivia}>\r\n            Start\r\n          </button>\r\n        ) : null}\r\n\r\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\r\n\r\n        {!loading && !gameOver && (\r\n          <QuestionCard\r\n            questionNmb={number + 1}\r\n            totalQuestions={TOTAL_QUESTIONS}\r\n            question={questions[number].question}\r\n            answers={questions[number].answers}\r\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\r\n            callback={checkAnswer}\r\n          />\r\n        )}\r\n\r\n        {!gameOver &&\r\n          !loading &&\r\n          userAnswers.length === number + 1 &&\r\n          number !== TOTAL_QUESTIONS - 1 && (\r\n            <button className=\"next\" onClick={nextQuestion}>\r\n              Next Question\r\n            </button>\r\n          )}\r\n      </Wrapper>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { fetchQuizQuestions, Difficulty, QuestionState } from '../API';\r\nimport { AnswerObject } from '../types/AnswerObject';\r\n\r\ninterface Props {\r\n  TOTAL_QUESTIONS: number;\r\n}\r\n\r\nexport const useQuiz = ({ TOTAL_QUESTIONS }: Props) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\r\n  const [number, setNumber] = useState(0);\r\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\r\n  const [score, setScore] = useState(0);\r\n  const [gameOver, setGameOver] = useState(true);\r\n\r\n  const startTrivia = async () => {\r\n    setLoading(true);\r\n    setGameOver(false);\r\n\r\n    try {\r\n      const newQuestions = await fetchQuizQuestions(\r\n        TOTAL_QUESTIONS,\r\n        Difficulty.EASY\r\n      );\r\n\r\n      setQuestions(newQuestions);\r\n      setScore(0);\r\n      setUserAnswers([]);\r\n      setNumber(0);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    if (!gameOver) {\r\n      const userAnswer = e.currentTarget.value;\r\n\r\n      // Compare against correct answer\r\n      const correct = questions[number].correct_answer === userAnswer;\r\n      if (correct) {\r\n        setScore(score + 1);\r\n      }\r\n\r\n      const answerObj: AnswerObject = {\r\n        question: questions[number].question,\r\n        answer: userAnswer,\r\n        correct,\r\n        correctAnswer: questions[number].correct_answer,\r\n      };\r\n\r\n      setUserAnswers([...userAnswers, answerObj]);\r\n    }\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    const nextQuestion = number + 1;\r\n    if (nextQuestion === TOTAL_QUESTIONS) {\r\n      setGameOver(true);\r\n    } else {\r\n      setNumber(nextQuestion);\r\n    }\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    questions,\r\n    number,\r\n    userAnswers,\r\n    score,\r\n    gameOver,\r\n    startTrivia,\r\n    checkAnswer,\r\n    nextQuestion,\r\n  };\r\n};\r\n","import { Quiz } from './components/Quiz';\n\nconst App = () => {\n  return <Quiz />;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}